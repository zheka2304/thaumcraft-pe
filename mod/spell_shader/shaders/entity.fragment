// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300
	// version 300 code
	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	#ifndef NO_TEXTURE
		_centroid in vec2 uv;
	#endif
#else
	// version 100 code
	#ifndef NO_TEXTURE
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			varying highp vec2 uv;
		#else
			varying vec2 uv;
		#endif
	#endif
#endif

#include "shaders/util.h"

//#define RES_SCALE 8.0;

uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;
uniform highp float TIME;

#ifdef USE_MULTITEXTURE
	uniform sampler2D TEXTURE_2;
#endif

varying vec4 light;
varying vec4 fogColor;

#ifdef USE_OVERLAY
	varying vec4 overlayColor;
#endif

#ifdef TINTED_ALPHA_TEST
varying float alphaTestMultiplier;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND) || defined(COLOR_SECOND_TEXTURE)
	varying vec4 changeColor;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
	varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

vec4 glintBlend(vec4 dest, vec4 source) {
	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	return vec4(source.rgb * source.rgb, source.a) + vec4(dest.rgb, 0.0);
}

#ifdef USE_EMISSIVE
#define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
#else
#ifndef USE_COLOR_MASK
#define NEEDS_DISCARD(C)	(C.a < 0.5)
#else
#define NEEDS_DISCARD(C)	(C.a <= 0.0)
#endif
#endif

highp float rand(highp float x){
 return fract(sin(x * 62751.828));
}

void main()
{
	vec4 color = vec4(1.0);

	#ifndef NO_TEXTURE
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		color = texture2D( TEXTURE_0, uv );
	#else
		color = texture2D_AA(TEXTURE_0, uv);
	#endif 

	float spell_flag = 0.0;
	#ifdef ALPHA_TEST
	if (abs(color.a - 0.8) < .02){
		spell_flag = 1.0;
	}
	#endif
	#ifndef NO_TEXTURE
	if (spell_flag > 0.5){
		vec2 ratio = vec2(1.0, 1.0);
		vec2 res = 2.0 * ratio;
		vec2 middle = (floor(uv * res) + 0.5);
		vec2 delta = uv * res - middle;
		float len = length(delta);
		float angle = atan(delta.x, delta.y) + mod(TIME * .4, 3.14159 * 2.0);
		vec2 texcoord = middle + len * vec2(sin(angle), cos(angle));
		if(texcoord.x > middle.x + .5 || texcoord.x < middle.x - .5 || texcoord.y > middle.y + .5 || texcoord.y < middle.y - .5){
		discard;
		}
		color = texture2D(TEXTURE_0, texcoord / res);
		float factor = max(color.r, max(color.g, color.b));
		color.rgb /= factor;
		color.a = factor;
		#ifdef BLOOM
			if(factor > .01){
				float bloom = sin(TIME) * .5 + .5; // bloom is value 0 - 1
				color.a = pow(color.a, 1.0 - bloom * .6);
				color.rgb *= 1.0 + bloom;
			}
		#endif
		if(color.a < .18){
			discard;
		}
	}
	#endif


	#ifndef NO_TEXTURE
	if(spell_flag < 0.5){
	#endif

	#ifdef ALPHA_TEST
		if(NEEDS_DISCARD(color))
			discard;
	#endif // ALPHA_TEST

	#ifdef TINTED_ALPHA_TEST
	vec4 testColor = color;
	testColor.a *= alphaTestMultiplier;
		if(NEEDS_DISCARD(testColor))
			discard;
	#endif // TINTED_ALPHA_TEST
	#endif // NO_TEXTURE

	#ifdef USE_COLOR_MASK
		color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
		color.a *= changeColor.a;
	#endif

	#ifdef ITEM_IN_HAND
		color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, light.a);
	#endif

	#ifdef USE_MULTITEXTURE
		vec4 tex1 = texture2D( TEXTURE_1, uv );
		vec4 tex2 = texture2D( TEXTURE_2, uv );
		color.rgb = mix(color.rgb, tex1.rgb, tex1.a);
	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0) {
			color.rgb = tex2.rgb + (tex2.rgb * changeColor.rgb - tex2.rgb)*tex2.a;//lerp(tex2.rgb, tex2 * changeColor.rgb, tex2.a)
		}
	#else
		color.rgb = mix(color.rgb, tex2.rgb, tex2.a);
	#endif
	#endif

	#ifdef USE_OVERLAY
		//use either the diffuse or the OVERLAY_COLOR
		color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
	#endif

	#ifdef USE_EMISSIVE
		//make glowy stuff
		color *= mix(vec4(1.0), light, color.a );
	#else
		color *= light;
	#endif

		//apply fog
		color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );

	#ifdef GLINT
		// Applies color mask to glint texture instead and blends with original color
		vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * glintColor;
		vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * glintColor;
		vec4 glint = (layer1 + layer2) * tileLightColor;

		//color = glintBlend(color, glint);
	#endif


	#ifndef NO_TEXTURE
	}
	#endif

	//WARNING do not refactor this 
	gl_FragColor = color;
}
